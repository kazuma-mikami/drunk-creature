{"version":3,"sources":["serviceWorker.ts","components/Square.tsx","contexts/SizeContext.tsx","domain/services.tsx","components/Board.tsx","components/PitchBar.tsx","components/SizeForm.tsx","components/ImageSelect.tsx","components/Game.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Square","image","style","step","backgroundColor","getStyle","Image","src","process","roundedCircle","height","width","className","SizeContext","createContext","size","setSize","movements","col","row","shuffle","array","i","length","j","Math","floor","random","countStepNum","history","position","Board","useContext","id","Array","fill","map","_","key","PitchBar","pitch","onChange","Form","Group","as","Col","controlId","Label","Control","type","min","max","value","custom","e","SizeForm","Number","target","ImageSelect","Row","Check","label","checked","Game","useState","getRandomPosition","setPosition","setHistory","setPitch","setImage","useEffect","intervalId","setInterval","_position","k","movement","pop","distination","walkDrunkenly","clearInterval","Navbar","bg","variant","Brand","href","alt","Provider","Card","margin","Header","Body","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a09c756f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { Image} from \"react-bootstrap\";\n\ntype SquareProps = {\n  image?: string;\n  step: number;\n};\n\nconst getStyle = (step:number):React.CSSProperties => {\n  const alfa = (step > 10? 10 : step)/10\n  return {backgroundColor: `rgba(0,0,0,${alfa})`}\n};\n\nconst Square: React.FC<SquareProps> = ({ image,step }) => {\n\n  const style = getStyle(step);\n\n  return (\n    <div>\n      {image ? (\n        <Image\n          src={`${process.env.PUBLIC_URL}/${image}`}\n          roundedCircle\n          height={50}\n          width={50}\n        />\n      ) : (\n        <div className=\"empty-content\" style={style}></div>\n      )}\n    </div>\n  );\n};\n\nexport default Square;\n","import { createContext } from 'react';\n\ntype SizeContextProps = {\n    size:number;\n    setSize:(size:number)=>void;\n}\n\nconst initialSizeContext:SizeContextProps = {\n    size:5,\n    setSize:()=>{},\n} \n\nexport const SizeContext = createContext<SizeContextProps>(initialSizeContext);","import { Position } from \"./entity\";\n\nexport const getRandomPosition = (size: number): Position => {\n  return {\n    col: Math.floor(Math.random() * size),\n    row: Math.floor(Math.random() * size)\n  };\n};\n\nconst movements: Position[] = [\n  { col: 0, row: 0 },\n  { col: 0, row: 1 },\n  { col: 0, row: -1 },\n  { col: 1, row: 0 },\n  { col: 1, row: 1 },\n  { col: 1, row: -1 },\n  { col: -1, row: 0 },\n  { col: -1, row: 1 },\n  { col: -1, row: -1 }\n];\n\nexport const walkDrunkenly = (position: Position, size: number) => {\n  let random = shuffle(\n    Array(9)\n      .fill(0)\n      .map((_, k) => k)\n  );\n  while (random.length > 0) {\n    const movement = movements[random.pop()!];\n    const distination: Position = {\n      col: position.col + movement.col,\n      row: position.row + movement.row\n    };\n    if (\n      distination.col >= 0 &&\n      distination.col < size &&\n      distination.row >= 0 &&\n      distination.row < size\n    ) {\n      return distination;\n    }\n  }\n\n  return {\n    col: position.col + (position.col > 0 ? -1 : 0),\n    row: position.row + (position.row > 0 ? -1 : 0),\n  };\n};\n\nconst shuffle = ([...array]: number[]) => {\n  for (let i = array.length - 1; i >= 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nexport const countStepNum = (history: Position[], position: Position) => {\n  let step = 0;\n  for (let i = 0; i < history.length; i++) {\n    if (history[i].col === position.col &&\n      history[i].row === position.row) {\n      step++;\n    }\n  }\n  return step;\n}\n","import React, { useContext } from \"react\";\nimport Square from \"./Square\";\nimport { Position } from \"../domain/entity\";\nimport { SizeContext } from \"../contexts/SizeContext\";\nimport { countStepNum } from \"../domain/services\";\n\ntype BoardProps = {\n  image: string;\n  position: Position;\n  history: Position[];\n};\n\nconst Board: React.FC<BoardProps> = ({ image, position, history }) => {\n  const { size } = useContext(SizeContext);\n\n  const getImage = (col: number, row: number) => {\n    if (col === position.col && row === position.row) {\n      return image;\n    } else {\n      return undefined;\n    }\n  };\n\n  return (\n    <table id=\"game-board\">\n      <tbody>\n        {Array(size)\n          .fill(0)\n          .map((_, i) => {\n            return (\n              <tr key={i}>\n                {Array(size)\n                  .fill(0)\n                  .map((_, j) => (\n                    <td key={j} >\n                      <Square image={getImage(j, i)} step={countStepNum(history, { col: j, row: i })} />\n                    </td>\n                  ))}\n              </tr>\n            );\n          })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\nimport { Form, Col } from \"react-bootstrap\";\n\nconst MAX_VALUE = 5000;\nconst MIN_VALUE = 50;\n\ntype PitchBarProps = {\n  pitch: number;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nconst PitchBar: React.FC<PitchBarProps> = ({ pitch, onChange }) => {\n  return (\n    <Form.Group as={Col} controlId=\"formBasicRangeCustom\">\n      <Form.Label>移動速度</Form.Label>\n      <Form.Control\n        type=\"range\"\n        min={MIN_VALUE}\n        max={MAX_VALUE}\n        value={pitch}\n        custom\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => onChange(e)}\n      ></Form.Control>\n    </Form.Group>\n  );\n};\n\nexport default PitchBar;\n","import { Form, Col } from \"react-bootstrap\";\nimport React, { useContext } from \"react\";\nimport { SizeContext } from \"../contexts/SizeContext\";\n\nconst SizeForm: React.FC = () => {\n  const { size, setSize } = useContext(SizeContext);\n\n  return (\n    <Form.Group as={Col} controlId=\"exampleForm.SelectCustomSizeSm\">\n      <Form.Label>盤面の大きさ(n×n)</Form.Label>\n      <Form.Control\n        type=\"number\"\n        min=\"1\"\n        max=\"100\"\n        value={size}\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n          setSize(Number(e.target.value))\n        }\n      ></Form.Control>\n    </Form.Group>\n  );\n};\n\nexport default SizeForm;\n","import React from 'react';\nimport { Form, Col } from 'react-bootstrap';\n\ntype ImageSelectProps = {\n    image: string;\n    onChange: (value: string) => void;\n};\n\nconst ImageSelect: React.FC<ImageSelectProps> = ({ image, onChange }) => {\n    return (\n        <Form.Group as={Col}>\n            <Form.Label>酔っ払い生物</Form.Label>\n            <Form.Row>\n                <Form.Check\n                    type=\"radio\"\n                    label=\"ゴキブリ\"\n                    onChange={() => onChange(\"cockroach.jpg\")}\n                    checked={image===\"cockroach.jpg\"}>\n                </Form.Check>\n                <Form.Check\n                    type=\"radio\"\n                    label=\"ハムスター\"\n                    onChange={() => onChange(\"hamster.png\")}\n                    checked={image===\"hamster.png\"}>\n                </Form.Check>\n                <Form.Check\n                    type=\"radio\"\n                    label=\"人間\"\n                    onChange={() => onChange(\"human.png\")}\n                    checked={image===\"human.png\"}>\n                </Form.Check>\n            </Form.Row>\n        </Form.Group>\n    );\n};\n\nexport default ImageSelect;","import React, { useState, useEffect } from \"react\";\nimport Board from \"./Board\";\nimport { getRandomPosition, walkDrunkenly } from \"../domain/services\";\nimport { Position } from \"../domain/entity\";\nimport { Form, Card, Navbar } from \"react-bootstrap\";\nimport PitchBar from \"./PitchBar\";\nimport { SizeContext } from \"../contexts/SizeContext\";\nimport SizeForm from \"./SizeForm\";\nimport ImageSelect from \"./ImageSelect\";\n\nconst Game: React.FC = () => {\n  const [size, setSize] = useState<number>(5);\n  const [position, setPosition] = useState<Position>(getRandomPosition(size));\n  const [history, setHistory] = useState<Position[]>([position]);\n  const [pitch, setPitch] = useState<number>(1000);\n  const [image, setImage] = useState<string>(\"cockroach.jpg\");\n\n  const handleChangePitch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setPitch(Number(e.target.value));\n  };\n\n  const handleChangeImage = (value: string) => {\n    setImage(value);\n  };\n\n  useEffect(() => {\n    let intervalId = setInterval(() => {\n      const _position = walkDrunkenly(position, size);\n      setPosition(_position);\n      setHistory([...history, position]);\n    }, pitch);\n    return () => {\n      clearInterval(intervalId);\n    };\n  });\n\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">\n          <img\n            alt=\"\"\n            src={`${process.env.PUBLIC_URL}/logo.png`}\n            width=\"30\"\n            height=\"30\"\n            className=\"d-inline-block align-top\"\n          />{' '}\n      Drunk Creature\n    </Navbar.Brand>\n      </Navbar>\n      <SizeContext.Provider value={{ size, setSize }}>\n        <Card style={{ margin: \"50px\" }}>\n          <Card.Header>設定</Card.Header>\n          <Card.Body>\n            <Form>\n              <Form.Row>\n                <PitchBar pitch={pitch} onChange={handleChangePitch} />\n                <SizeForm />\n              </Form.Row>\n              <Form.Row>\n                <ImageSelect image={image} onChange={handleChangeImage} />\n              </Form.Row>\n            </Form>\n          </Card.Body>\n        </Card>\n        <Board image={image} position={position} history={history} />\n      </SizeContext.Provider>\n    </>\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Game from './components/Game';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}